name: Test Notification Workflow

on:
  push:
    branches: [main, develop]
  workflow_dispatch:  # Allows manual triggering

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  test-notification:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Get full history

      - name: "Send Release Notification on Asana Task"
        run: |
          # Extract PR number from merge commit message
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          PR_NUMBER=$(echo "$COMMIT_MESSAGE" | grep -oP '#\K\d+')

          # Skip if direct commit (no PR number)
          if [ -z "$PR_NUMBER" ]; then
          echo "‚ÑπÔ∏è No PR number found in commit message ‚Äî likely a direct push. Skipping Asana notification."
          exit 0
          fi

          echo "Found PR number: $PR_NUMBER"

          # Get PR body using GitHub API
          PR_BODY=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER" | \
            jq -r '.body // ""')

            # Extract Asana task ID from PR body
            ASANA_TASK_ID=$(echo "$PR_BODY" | grep -oP 'https://app\.asana\.com/.*/(?:task|item)/\d+' | grep -oP '\d+$' || true)

            # Skip if no Asana task ID
            if [ -z "$ASANA_TASK_ID" ]; then
              echo "‚ÑπÔ∏è No Asana task ID found in PR body ‚Äî skipping notification."
              exit 0
            fi

            REPO=${{ github.repository }}
            PR_URL="https://github.com/$REPO/pull/$PR_NUMBER"

            echo "‚úÖ Sending release notification to Asana task $ASANA_TASK_ID"

            # Send notification directly with curl using inline JSON
            curl -s -X POST "https://app.asana.com/api/1.0/tasks/$ASANA_TASK_ID/stories" \
              -H "Authorization: Bearer ${{ secrets.ASANA_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{\"data\": {\"text\": \"Hi team,üöÄ This has been successfully deployed to debug/beta!üîó PR Link: $PR_URL\"}}"

            echo "‚úÖ Asana task updated: $ASANA_TASK_ID"


      # - name: "Test Summary"
      #   run: |
      #     echo "üéâ Test completed successfully!"
      #     echo "üìã This workflow tested:"
      #     echo "  ‚úÖ PR number extraction from commit messages"
      #     echo "  ‚úÖ Asana task ID extraction from PR bodies"
      #     echo "  ‚úÖ Failed workflow run detection"
      #     echo "  ‚úÖ Commit range analysis"
      #     echo ""
      #     echo "üîí All operations were read-only and safe"
      #     echo "üöÄ Ready to implement in production workflow"

      - name: "Extract changelog"
        id: extract-changelog
        uses: TheDotLabs/extract-release-notes@main

      - name: "Send Release Notifications on Asana Tasks"
        run: |
          # Extract all PR numbers from the release notes
          RELEASE_NOTES="${{ steps.extract-changelog.outputs.release_notes }}"
          PR_NUMBERS=$(echo "$RELEASE_NOTES" | grep -oP '\(#\K\d+(?=\))' | sort -u)

          if [ -z "$PR_NUMBERS" ]; then
            echo "No PR numbers found in release notes"
            exit 0
          fi

          echo "Found PR numbers: $PR_NUMBERS"

          # Loop through each PR number
          for PR_NUMBER in $PR_NUMBERS; do
            echo "Processing PR #$PR_NUMBER"

            # Get PR body using GitHub API
            PR_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER")

            PR_BODY=$(echo "$PR_RESPONSE" | jq -r '.body // ""')

            # Skip if PR body is empty or PR does not exist
            if [ -z "$PR_BODY" ]; then
              echo "‚ö†Ô∏è  Could not fetch PR #$PR_NUMBER body or PR does not exist. Skipping."
              continue
            fi

            # Extract Asana task ID from PR body (supports /task/ and /item/)
            ASANA_TASK_ID=$(echo "$PR_BODY" | grep -oP 'https://app\.asana\.com/.*/(?:task|item)/\K\d+' || true)

            if [ -n "$ASANA_TASK_ID" ]; then
              REPO=${{ github.repository }}
              PR_URL="https://github.com/$REPO/pull/$PR_NUMBER"

              echo "Updating Asana task $ASANA_TASK_ID for PR #$PR_NUMBER"

              PAYLOAD=$(jq -n --arg text $'Hi team,\nüöÄ This has been successfully deployed to production!\nüîó PR Link: '"$PR_URL"'\nüì¶ Release: '"${{ github.ref_name }}" '{data: {text: $text}}')

              curl -s -X POST https://app.asana.com/api/1.0/tasks/$ASANA_TASK_ID/stories \
                -H "Authorization: Bearer ${{ secrets.ASANA_TOKEN }}" \
                -H "Content-Type: application/json" \
                -d "$PAYLOAD"

              echo "‚úÖ Asana task updated: $ASANA_TASK_ID"
            else
              echo "‚ö†Ô∏è  No Asana task ID found in PR #$PR_NUMBER. Skipping."
            fi
          done
















