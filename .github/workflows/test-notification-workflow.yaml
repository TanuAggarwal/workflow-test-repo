name: Test Notification Workflow

on:
  push:
    branches: [main, develop]
  workflow_dispatch:  # Allows manual triggering

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  test-notification:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Get full history

      - name: "Send Release Notification on Asana Task"
        run: |
          # Extract PR number from merge commit message
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          PR_NUMBER=$(echo "$COMMIT_MESSAGE" | grep -oP 'Merge pull request #(\d+)' | grep -oP '\d+')
          
          if [ ! -z "$PR_NUMBER" ]; then
            echo "Found PR number: $PR_NUMBER"
            
            # Get PR body using GitHub API
            PR_BODY=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER" | \
              jq -r '.body // ""')
            
            # Extract Asana task ID from PR body
            ASANA_TASK_ID=$(echo "$PR_BODY" | grep -oP 'https://app\.asana\.com/.*/(?:task|item)/(\d+)' | grep -oP '\d+$')
            
            # Only send update if task ID is found
            if [ ! -z "$ASANA_TASK_ID" ]; then
              REPO=${{ github.repository }}
              PR_URL="https://github.com/$REPO/pull/$PR_NUMBER"
              curl -X POST https://app.asana.com/api/1.0/tasks/$ASANA_TASK_ID/stories \
                -H "Authorization: Bearer ${{ secrets.ASANA_TOKEN }}" \
                -H "Content-Type: application/json" \
                -d "{\"data\": {
                      \"text\": \"Hi team,\nüöÄ This has been successfully deployed to debug/beta!\nüîó PR Link: $PR_URL\"
                    }}"
              echo "Asana task updated: $ASANA_TASK_ID"
            else
              echo "No Asana task ID found in PR body"
            fi
          else
            echo "No PR number found in commit message - this might be a direct push"
          fi

      - name: "Test Previously Failed Commits Logic"
        run: |
          echo "üß™ Testing previously failed commits notification logic..."
          
          # Get the last successful workflow run (safe read-only operation)
          LAST_SUCCESS_SHA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?branch=${{ github.ref_name }}&status=success&per_page=1" | \
            jq -r '.workflow_runs[0].head_sha // ""')
          
          echo "Last successful SHA: $LAST_SUCCESS_SHA"
          echo "Current SHA: ${{ github.sha }}"
          
          # Get commits between last success and current (if different)
          if [ ! -z "$LAST_SUCCESS_SHA" ] && [ "$LAST_SUCCESS_SHA" != "${{ github.sha }}" ]; then
            echo "üìä Getting commits between $LAST_SUCCESS_SHA and ${{ github.sha }}"
            
            # Get commits in the range (safe read-only)
            COMMITS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/compare/$LAST_SUCCESS_SHA...${{ github.sha }}" | \
              jq -r '.commits[]? | "\(.sha) \(.commit.message | split("\n")[0])"' || echo "")
            
            echo "Commits to analyze:"
            echo "$COMMITS"
            
            # Analyze each commit (read-only)
            echo "$COMMITS" | while IFS=' ' read -r commit_sha commit_message; do
              if [ ! -z "$commit_sha" ] && [ "$commit_sha" != "${{ github.sha }}" ]; then
                echo "üîç Analyzing commit: $commit_sha"
                echo "üìù Message: $commit_message"
                
                # Check for failed workflow runs (read-only)
                FAILED_RUNS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  "https://api.github.com/repos/${{ github.repository }}/actions/runs?head_sha=$commit_sha&status=failure" | \
                  jq -r '.workflow_runs[]? | select(.name == "Test Notification Workflow") | .id' || echo "")
                
                if [ ! -z "$FAILED_RUNS" ]; then
                  echo "‚ùå Found failed runs for commit $commit_sha: $FAILED_RUNS"
                  
                  # Extract PR number from commit message
                  PR_NUM=$(echo "$commit_message" | grep -oP 'Merge pull request #(\d+)' | grep -oP '\d+' || echo "")
                  
                  if [ ! -z "$PR_NUM" ]; then
                    echo "üîó Found PR number $PR_NUM for failed commit"
                    echo "üì¨ Would send delayed deployment notification for PR #$PR_NUM"
                  else
                    echo "‚ÑπÔ∏è No PR number found in commit message"
                  fi
                else
                  echo "‚úÖ No failed runs found for commit $commit_sha"
                fi
              fi
            done
          else
            echo "‚ÑπÔ∏è No previous commits to check or this is the first run"
          fi

      - name: "Test Summary"
        run: |
          echo "üéâ Test completed successfully!"
          echo "üìã This workflow tested:"
          echo "  ‚úÖ PR number extraction from commit messages"
          echo "  ‚úÖ Asana task ID extraction from PR bodies"
          echo "  ‚úÖ Failed workflow run detection"
          echo "  ‚úÖ Commit range analysis"
          echo ""
          echo "üîí All operations were read-only and safe"
          echo "üöÄ Ready to implement in production workflow"


      - name: "Extract changelog"
        id: extract-changelog
        uses: TheDotLabs/extract-release-notes@main

      - name: "Send Release Notifications on Asana Tasks"
        run: |
          # Extract all PR numbers from the release notes
          RELEASE_NOTES="${{ steps.extract-changelog.outputs.release_notes }}"
          PR_NUMBERS=$(echo "$RELEASE_NOTES" | grep -oP '\(#\K\d+(?=\))' | sort -u)
          
          if [ -z "$PR_NUMBERS" ]; then
            echo "No PR numbers found in release notes"
            exit 0
          fi
          
          echo "Found PR numbers: $PR_NUMBERS"
          
          # Loop through each PR number
          for PR_NUMBER in $PR_NUMBERS; do
            echo "Processing PR #$PR_NUMBER"
            
            # Get PR body using GitHub API
            PR_BODY=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER" | \
              jq -r '.body // ""')
            
            # Extract Asana task ID from PR body
            ASANA_TASK_ID=$(echo "$PR_BODY" | grep -oP 'https://app\.asana\.com/.*/(?:task|item)/\K\d+')
            
            # Only send update if task ID is found
            if [ ! -z "$ASANA_TASK_ID" ]; then
              REPO=${{ github.repository }}
              PR_URL="https://github.com/$REPO/pull/$PR_NUMBER"
              
              echo "Updating Asana task $ASANA_TASK_ID for PR #$PR_NUMBER"
              
              curl -X POST https://app.asana.com/api/1.0/tasks/$ASANA_TASK_ID/stories \
                -H "Authorization: Bearer ${{ secrets.ASANA_TOKEN }}" \
                -H "Content-Type: application/json" \
                -d "{\"data\": {
                      \"text\": \"Hi team,\nüöÄ This has been successfully deployed to production!\nüîó PR Link: $PR_URL\nüì¶ Release: ${{ github.ref_name }}\"
                    }}"
              
              echo "‚úÖ Asana task updated: $ASANA_TASK_ID"
            else
              echo "‚ö†Ô∏è  No Asana task ID found in PR #$PR_NUMBER"
            fi
            
            # Small delay to avoid rate limiting
            sleep 1
          done
          
          echo "Finished processing all PR numbers"













